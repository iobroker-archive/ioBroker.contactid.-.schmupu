{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport * as fs from 'fs';\nimport * as cidmanager from './lib/contactid';\nimport * as dp from './lib/datapoints';\nimport * as tools from './lib/tools';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass contactid extends utils.Adapter {\n    private cidclient: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'contactid',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.info(`Starting Adapter ${this.namespace} in version ${this.version}`);\n        await this.setState('info.connection', { val: true, ack: true });\n        this.subscribeStates('*');\n        await this.deleteObjects();\n        await this.createObjects();\n        const subscribers: cidmanager.ifsubscriber[] = this.config.keys;\n        try {\n            this.cidclient = new cidmanager.ContactID({\n                host: this.config.bind,\n                port: this.config.port,\n                logger: this.log,\n            });\n            this.cidclient.setSubscribers(subscribers);\n\n            this.cidclient.serverStartTCP();\n        } catch (err) {\n            this.log.error(`Error (1): ${tools.getErrorMessage(err)}`);\n        }\n        this.cidclient.on('cid', async (cid: cidmanager.ifCID, err: any) => {\n            if (cid) {\n                try {\n                    await this.setStatesContactID(cid);\n                } catch (err) {\n                    this.log.error(`Error (2): ${tools.getErrorMessage(err)}`);\n                }\n            }\n            if (err) {\n                this.log.error(`Error (3): ${err}`);\n            }\n        });\n        this.cidclient.on('data', (data: any) => {\n            if (data) {\n                this.log.debug(`Data: ${JSON.stringify(data)}`);\n                if (this.config.save) {\n                    try {\n                        if (!fs.existsSync(this.config.path)) {\n                            this.log.info(`Creating path ${this.config.path}`);\n                            fs.mkdirSync(this.config.path, { recursive: true });\n                        }\n                        for (let i = 0; i <= 1000; i++) {\n                            // const filename = `${tools.addSlashToPath(this.config.path)}cid_msg_${Date.now()}.txt`;\n                            const filename = `${tools.addSlashToPath(this.config.path)}cid_msg_${tools.getTimeStrFromUnixTime()}.txt`;\n                            if (!fs.existsSync(filename)) {\n                                fs.writeFileSync(filename, data, 'binary');\n                                if (fs.existsSync(filename)) {\n                                    this.log.info(`Save ContactID message to ${filename}`);\n                                } else {\n                                    this.log.error(`Could not write ContactID message to file ${filename}.`);\n                                }\n                                break;\n                            }\n                        }\n                    } catch (err) {\n                        this.log.error(`Could not write ContactID message to file . ${tools.getErrorMessage(err)}`);\n                    }\n                }\n            }\n        });\n        this.cidclient.on('error', async (err: any) => {\n            this.log.error(`Error ${err}`);\n            await this.setState('info.connection', { val: false, ack: true });\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback callback function\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            this.log.info(`Stopping sia processes, please wait!`);\n            await this.setState('info.connection', { val: false, ack: true });\n            callback();\n        } catch (err) {\n            this.log.error(`Error: ${tools.getErrorMessage(err)}`);\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n        if (this.cidclient) {\n            try {\n                this.cidclient.deleteObjects();\n                this.cidclient.createObjects();\n            } catch (err) {\n                this.log.error(`Error in onObjectChange ${tools.getErrorMessage(err)}`);\n            }\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes.\n     *\n     * @param id id\n     * @param state state\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state && !state.ack) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const stateId = id.replace(`${this.namespace}.`, '');\n        }\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     *\n     * @param obj object\n     */\n    private onMessage(obj: ioBroker.Message): void {\n        if (typeof obj === 'object' && obj.message) {\n            switch (obj.command) {\n                case 'msg': {\n                    break;\n                }\n                default:\n                    this.log.error(`Unknown comannd ${obj.command} in onMessage`);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * convert subscriber to ID for using as channel name. Special characters and spaces are deleted.\n     *\n     * @param subscribernumber subscribernumber\n     */\n    private getSubscriberrNumberID(subscribernumber: string): string {\n        const id = subscribernumber.replace(/[.\\s]+/g, '_');\n        return id;\n    }\n\n    public async deleteObjects(): Promise<void> {\n        try {\n            await this.getAdapterObjects((obj: any) => {\n                for (const idx in obj) {\n                    if (!idx.startsWith(`${this.namespace}.subscriber.`) || obj[idx].type !== 'channel') {\n                        continue;\n                    }\n                    let found = false;\n                    for (const key of this.config.keys as any) {\n                        const idkey = `${this.namespace}.subscriber.${this.getSubscriberrNumberID(key.subscriber)}`;\n                        if (idx === idkey) {\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (found === false) {\n                        const id = idx.replace('${this.adapter.namespace}.', '');\n                        this.log.debug(`Deleting object ${idx} recursive`);\n                        this.delObject(id, { recursive: true });\n                    }\n                }\n            });\n        } catch (err) {\n            throw new Error(`Could not delte objects ${tools.getErrorMessage(err)}`);\n        }\n    }\n\n    /**\n     * read configuration, and create for all subscribers a channel and states\n     */\n    public async createObjects(): Promise<void> {\n        for (const key of this.config.keys as any) {\n            const id = `subscriber.${this.getSubscriberrNumberID(key.subscriber)}`;\n            const obj = dp.dpCID || {};\n            const ret = await this.setObjectNotExists(id, {\n                type: 'channel',\n                common: {\n                    name: key.subscriber,\n                },\n                native: {},\n            });\n            if (ret) {\n                this.log.debug(`Create object ${id}`);\n            }\n            for (const prop in obj) {\n                const sid = `${id}.${prop}`;\n                const parameter = JSON.parse(JSON.stringify(obj[prop]));\n                parameter.name = `${key.subscriber} - ${parameter.name}`;\n                const ret = await this.setObjectNotExists(sid, {\n                    type: 'state',\n                    common: parameter,\n                    native: {},\n                });\n                if (ret) {\n                    this.log.debug(`Create object ${sid}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * Set state for ContactID message\n     *\n     * @param cid - ContactID message\n     */\n    private async setStatesContactID(cid: cidmanager.ifCID): Promise<void> {\n        const obj = dp.dpCID || {};\n        let val: any = undefined;\n        if (!cid?.subscriber) {\n            throw new Error(`Subscriber is missing in ContactID message`);\n        }\n        this.log.debug(`setStatesContactID for ${cid.subscriber} : ${JSON.stringify(cid)}`);\n        const id = `subscriber.${this.getSubscriberrNumberID(cid.subscriber)}`;\n        if (!(await this.objectExists(id))) {\n            throw new Error(`Object ${id} for subscriber ${cid.subscriber} is missing in ContactID message.`);\n        }\n        for (const prop in obj) {\n            const sid = `${id}.${prop}`;\n            switch (prop) {\n                case 'subscriber':\n                    val = cid.subscriber;\n                    break;\n                case 'msgtype':\n                    val = cid.msgtype;\n                    break;\n                case 'event':\n                    val = cid.event;\n                    break;\n                case 'eventtext':\n                    val = cid.eventtext;\n                    break;\n                case 'group':\n                    val = cid.group;\n                    break;\n                case 'qualifier':\n                    val = cid.qualifier;\n                    break;\n                case 'sensor':\n                    val = cid.sensor;\n                    break;\n                case 'message':\n                    val = cid.data.toString();\n                    break;\n                default:\n                    val = undefined;\n            }\n            this.log.debug(`Set state for id ${sid} with value ${val}`);\n            await this.setState(sid, {\n                val: val,\n                ack: true,\n            });\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new contactid(options);\n} else {\n    // otherwise start the instance directly\n    (() => new contactid())();\n}\n"],
  "mappings": "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",
  "names": ["err", "ret"]
}
