{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { ContactID } from './lib/contactid';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass contactid extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'contactid',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        this.log.info(`Starting: ${this.namespace}`);\n        const contactid = new ContactID(this);\n        if (contactid) {\n            await ContactID.wait(5);\n            contactid.deleteObjects();\n            contactid.createObjects();\n            contactid.serverStart();\n        } else {\n            await this.setStateAsync('info.connection', { val: false, ack: true });\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback callback function\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            callback();\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (error) {\n            callback();\n        }\n        await this.setStateAsync('info.connection', { val: true, ack: true });\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n        if (obj) {\n            // The object was changed\n            this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n        } else {\n            // The object was deleted\n            this.log.info(`object ${id} deleted`);\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes.\n     *\n     * @param id id\n     * @param state state\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new contactid(options);\n} else {\n    // otherwise start the instance directly\n    (() => new contactid())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,uBAA0B;AAK1B,MAAM,kBAAkB,MAAM,QAAQ;AAAA,EAC3B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AAEtD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAEnC,SAAK,IAAI,KAAK,aAAa,KAAK,WAAW;AAC3C,UAAMA,aAAY,IAAI,2BAAU,IAAI;AACpC,QAAIA,YAAW;AACX,YAAM,2BAAU,KAAK,CAAC;AACtB,MAAAA,WAAU,cAAc;AACxB,MAAAA,WAAU,cAAc;AACxB,MAAAA,WAAU,YAAY;AAAA,IAC1B,OAAO;AACH,YAAM,KAAK,cAAc,mBAAmB,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,IACzE;AAAA,EACJ;AAAA,EAOA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,eAAS;AAAA,IAEb,SAAS,OAAP;AACE,eAAS;AAAA,IACb;AACA,UAAM,KAAK,cAAc,mBAAmB,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAAA,EACxE;AAAA,EAOQ,eAAe,IAAY,KAA+C;AAC9E,QAAI,KAAK;AAEL,WAAK,IAAI,KAAK,UAAU,eAAe,KAAK,UAAU,GAAG,GAAG;AAAA,IAChE,OAAO;AAEH,WAAK,IAAI,KAAK,UAAU,YAAY;AAAA,IACxC;AAAA,EACJ;AAAA,EAQQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,UAAU,OAAO;AAClG,OAAO;AAEH,GAAC,MAAM,IAAI,UAAU,GAAG;AAC5B;",
  "names": ["contactid"]
}
