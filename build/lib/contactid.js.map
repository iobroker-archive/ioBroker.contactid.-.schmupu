{
  "version": 3,
  "sources": ["../../src/lib/contactid.ts"],
  "sourcesContent": ["import * as net from 'net';\nimport * as dp from './datapoints';\n\ninterface ifCID {\n    subscriber: string;\n    data: any; // Buffer<ArrayBuffer>;\n    event: number;\n    eventtext: string;\n    group: string;\n    qualifier: number;\n    sensor: string;\n    checksum: number;\n}\n\n/**\n * Contact ID Klasse\n */\nexport class ContactID {\n    private adapter: any;\n    private server: any;\n\n    /**\n     * Construtor\n     *\n     * @param adapter iobroker adapter\n     */\n    public constructor(adapter: any) {\n        this.adapter = adapter;\n    }\n\n    /**\n     * Convert subcriber to ID for using as channel name. Special characters and spaces are deleted.\n     *\n     * @param subscriber subscriber\n     */\n    private getSubscriberID(subscriber: string): string {\n        const id = subscriber.replace(/[.\\s]+/g, '_');\n        return id;\n    }\n\n    /**\n     * create for every ID a channel and create a few states\n     *\n     * @param id id\n     * @param key key\n     */\n    private createObjectCID(id: any, key: any): void {\n        const obj = dp.dpCID || {};\n        this.adapter.setObjectNotExists(id, {\n            type: 'channel',\n            common: {\n                name: key.subscriber,\n            },\n            native: {},\n        });\n        for (const prop in obj) {\n            const sid = `${id}.${prop}`;\n            const parameter = JSON.parse(JSON.stringify(obj[prop]));\n            parameter.name = `${key.subscriber} - ${parameter.name}`;\n            this.adapter.setObjectNotExists(sid, {\n                type: 'state',\n                common: parameter,\n                native: {},\n            });\n        }\n    }\n\n    /**\n     * read configuration by subscriber and return the alarmsytem\n     *\n     * @param subscriber subscriber\n     */\n    private getAlarmSystem(subscriber: string): string {\n        for (const key of this.adapter.config.keys) {\n            if (key.subscriber == subscriber) {\n                return key.alarmsystem;\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Acknowledge for CID\n     *\n     * @param cid cid\n     */\n    private ackCID(cid: ifCID): any {\n        let ack = undefined;\n        switch (this.getAlarmSystem(cid.subscriber)) {\n            case 'lupusec_xt1':\n                ack = Buffer.alloc(1);\n                ack[0] = 6; //Acknowledge Lupusex 0x6\n                break;\n            case 'lupusec_xt1p':\n            case 'lupusec_xt2':\n            case 'lupusec_xt2p':\n            case 'lupusec_xt3':\n            case 'lupusec_xt4':\n                // ack = cid.data; // komplette Nachricht wieder zur\u00FCckegeben\n                ack = Buffer.alloc(1);\n                ack[0] = 6; //Acknowledge Lupusex 0x6\n                break;\n            default:\n                ack = cid.data;\n        }\n        return ack;\n    }\n\n    /**\n     * Set state for contact id message\n     *\n     * @param cid cid\n     */\n    private setStatesCID(cid: ifCID): void {\n        const obj = dp.dpCID || {};\n        let val = undefined;\n        if (cid) {\n            for (const key of this.adapter.config.keys) {\n                if (key.subscriber == cid.subscriber) {\n                    const id = this.getSubscriberID(cid.subscriber);\n                    for (const prop in obj) {\n                        const sid = `subscriber.${id}.${prop}`;\n                        switch (prop) {\n                            case 'subscriber':\n                                val = cid.subscriber;\n                                break;\n                            case 'event':\n                                val = cid.event;\n                                break;\n                            case 'eventtext':\n                                val = cid.eventtext;\n                                break;\n                            case 'group':\n                                val = cid.group;\n                                break;\n                            case 'qualifier':\n                                val = cid.qualifier;\n                                break;\n                            case 'sensor':\n                                val = cid.sensor;\n                                break;\n                            case 'message':\n                                val = cid.data;\n                                break;\n                            default:\n                                val = undefined;\n                        }\n                        this.adapter.setState(sid, { val: val, ack: true });\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Text for Events\n     *\n     * @param event Eventnummber\n     */\n    private getEventText(event: string): string {\n        const events: dp.defEvents = dp.events;\n        return events[event] || '';\n    }\n\n    /**\n     * parse contactid and put into object\n     *\n     * @param data contactid message from alarm system\n     */\n    private parseCID(data: any): ifCID | undefined {\n        const reg = /^\\[(.+) 18(.)(.{3})(.{2})(.{3})(.)(.*)\\]/gm;\n        const match = reg.exec(data);\n        if (match) {\n            // <ACCT><MT><QXYZ><GG><CCC><S>\n            const cid = {\n                data: data,\n                subscriber: match[1].trim(),\n                qualifier: Number(match[2]),\n                event: Number(match[3]),\n                eventtext: this.getEventText(match[3]),\n                group: match[4],\n                sensor: match[5],\n                checksum: Number(match[6]),\n            };\n            return cid;\n        }\n        return undefined;\n    }\n\n    /**\n     * list of all objects (devices, channel, states) for this instance. call function  deleteChannel\n     * for deleting old (not used) channels in configuration\n     */\n    public deleteObjects(): void {\n        this.adapter.getAdapterObjects((obj: any) => {\n            for (const idx in obj) {\n                if (!idx.startsWith(`${this.adapter.namespace}.subscriber`) || obj[idx].type !== 'channel') {\n                    continue;\n                }\n                let found = false;\n                for (const key of this.adapter.config.keys) {\n                    const idkey = `${this.adapter.namespace}.subscriber.${this.getSubscriberID(key.subscriber)}`;\n                    if (idx === idkey) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found === false) {\n                    const id = idx.replace('${this.adapter.namespace}.', '');\n                    this.adapter.log.debug(`Deleting object ${idx} recursive`);\n                    this.adapter.delObject(id, { recursive: true });\n                }\n            }\n        });\n    }\n\n    /**\n     * read configuration, and create for all subscribers a channel and states\n     */\n    public createObjects(): void {\n        for (const key of this.adapter.config.keys) {\n            const id = `subscriber.${this.getSubscriberID(key.subscriber)}`;\n            this.createObjectCID(id, key);\n        }\n    }\n\n    /**\n     * start socket server for listining for contact IDs\n     */\n    public serverStart(): void {\n        this.server = net.createServer(sock => {\n            const remoteAddress = `${sock.remoteAddress}:${sock.remotePort}`;\n            this.adapter.log.debug(`New client connected: ${remoteAddress}`);\n            sock.on('data', data => {\n                const strdata = data.toString().trim();\n                this.adapter.log.info(`${remoteAddress} sending following message: ${strdata}`);\n                // [alarmanlage 18140101001B4B6]\n                // [alarmanlage 18160200000C5B7]\n                const cid = this.parseCID(strdata);\n                if (cid) {\n                    this.adapter.log.debug(`Received message: ${JSON.stringify(cid)}`);\n                    this.setStatesCID(cid);\n                    const ack = this.ackCID(cid);\n                    sock.end(ack);\n                } else {\n                    sock.end();\n                }\n            });\n            sock.on('close', () => {\n                this.adapter.log.info(`connection from ${remoteAddress} closed`);\n            });\n            sock.on('error', err => {\n                this.adapter.log.error(`Connection ${remoteAddress}, Error: ${err.message}`);\n            });\n        });\n\n        this.server.listen(this.adapter.config.port, this.adapter.config.bind, () => {\n            const text = `Contact ID Server listening on IP-Adress: ${this.server.address().address}:${this.server.address().port}`;\n            this.adapter.log.info(text);\n        });\n    }\n\n    /**\n     * Wait (sleep) x seconds\n     *\n     * @param seconds time in seconds\n     * @returns void\n     */\n    public static wait(seconds: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, seconds * 1000));\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqB;AACrB,SAAoB;AAgBb,MAAM,UAAU;AAAA,EACX;AAAA,EACA;AAAA,EAOD,YAAY,SAAc;AAC7B,SAAK,UAAU;AAAA,EACnB;AAAA,EAOQ,gBAAgB,YAA4B;AAChD,UAAM,KAAK,WAAW,QAAQ,WAAW,GAAG;AAC5C,WAAO;AAAA,EACX;AAAA,EAQQ,gBAAgB,IAAS,KAAgB;AAC7C,UAAM,MAAM,GAAG,SAAS,CAAC;AACzB,SAAK,QAAQ,mBAAmB,IAAI;AAAA,MAChC,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM,IAAI;AAAA,MACd;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,eAAW,QAAQ,KAAK;AACpB,YAAM,MAAM,GAAG,MAAM;AACrB,YAAM,YAAY,KAAK,MAAM,KAAK,UAAU,IAAI,KAAK,CAAC;AACtD,gBAAU,OAAO,GAAG,IAAI,gBAAgB,UAAU;AAClD,WAAK,QAAQ,mBAAmB,KAAK;AAAA,QACjC,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ,CAAC;AAAA,MACb,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EAOQ,eAAe,YAA4B;AAC/C,eAAW,OAAO,KAAK,QAAQ,OAAO,MAAM;AACxC,UAAI,IAAI,cAAc,YAAY;AAC9B,eAAO,IAAI;AAAA,MACf;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAOQ,OAAO,KAAiB;AAC5B,QAAI,MAAM;AACV,YAAQ,KAAK,eAAe,IAAI,UAAU,GAAG;AAAA,MACzC,KAAK;AACD,cAAM,OAAO,MAAM,CAAC;AACpB,YAAI,KAAK;AACT;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAED,cAAM,OAAO,MAAM,CAAC;AACpB,YAAI,KAAK;AACT;AAAA,MACJ;AACI,cAAM,IAAI;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA,EAOQ,aAAa,KAAkB;AACnC,UAAM,MAAM,GAAG,SAAS,CAAC;AACzB,QAAI,MAAM;AACV,QAAI,KAAK;AACL,iBAAW,OAAO,KAAK,QAAQ,OAAO,MAAM;AACxC,YAAI,IAAI,cAAc,IAAI,YAAY;AAClC,gBAAM,KAAK,KAAK,gBAAgB,IAAI,UAAU;AAC9C,qBAAW,QAAQ,KAAK;AACpB,kBAAM,MAAM,cAAc,MAAM;AAChC,oBAAQ,MAAM;AAAA,cACV,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ,KAAK;AACD,sBAAM,IAAI;AACV;AAAA,cACJ;AACI,sBAAM;AAAA,YACd;AACA,iBAAK,QAAQ,SAAS,KAAK,EAAE,KAAU,KAAK,KAAK,CAAC;AAAA,UACtD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAOQ,aAAa,OAAuB;AACxC,UAAM,SAAuB,GAAG;AAChC,WAAO,OAAO,UAAU;AAAA,EAC5B;AAAA,EAOQ,SAAS,MAA8B;AAC3C,UAAM,MAAM;AACZ,UAAM,QAAQ,IAAI,KAAK,IAAI;AAC3B,QAAI,OAAO;AAEP,YAAM,MAAM;AAAA,QACR;AAAA,QACA,YAAY,MAAM,GAAG,KAAK;AAAA,QAC1B,WAAW,OAAO,MAAM,EAAE;AAAA,QAC1B,OAAO,OAAO,MAAM,EAAE;AAAA,QACtB,WAAW,KAAK,aAAa,MAAM,EAAE;AAAA,QACrC,OAAO,MAAM;AAAA,QACb,QAAQ,MAAM;AAAA,QACd,UAAU,OAAO,MAAM,EAAE;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAMO,gBAAsB;AACzB,SAAK,QAAQ,kBAAkB,CAAC,QAAa;AACzC,iBAAW,OAAO,KAAK;AACnB,YAAI,CAAC,IAAI,WAAW,GAAG,KAAK,QAAQ,sBAAsB,KAAK,IAAI,KAAK,SAAS,WAAW;AACxF;AAAA,QACJ;AACA,YAAI,QAAQ;AACZ,mBAAW,OAAO,KAAK,QAAQ,OAAO,MAAM;AACxC,gBAAM,QAAQ,GAAG,KAAK,QAAQ,wBAAwB,KAAK,gBAAgB,IAAI,UAAU;AACzF,cAAI,QAAQ,OAAO;AACf,oBAAQ;AACR;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,UAAU,OAAO;AACjB,gBAAM,KAAK,IAAI,QAAQ,8BAA8B,EAAE;AACvD,eAAK,QAAQ,IAAI,MAAM,mBAAmB,eAAe;AACzD,eAAK,QAAQ,UAAU,IAAI,EAAE,WAAW,KAAK,CAAC;AAAA,QAClD;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAKO,gBAAsB;AACzB,eAAW,OAAO,KAAK,QAAQ,OAAO,MAAM;AACxC,YAAM,KAAK,cAAc,KAAK,gBAAgB,IAAI,UAAU;AAC5D,WAAK,gBAAgB,IAAI,GAAG;AAAA,IAChC;AAAA,EACJ;AAAA,EAKO,cAAoB;AACvB,SAAK,SAAS,IAAI,aAAa,UAAQ;AACnC,YAAM,gBAAgB,GAAG,KAAK,iBAAiB,KAAK;AACpD,WAAK,QAAQ,IAAI,MAAM,yBAAyB,eAAe;AAC/D,WAAK,GAAG,QAAQ,UAAQ;AACpB,cAAM,UAAU,KAAK,SAAS,EAAE,KAAK;AACrC,aAAK,QAAQ,IAAI,KAAK,GAAG,4CAA4C,SAAS;AAG9E,cAAM,MAAM,KAAK,SAAS,OAAO;AACjC,YAAI,KAAK;AACL,eAAK,QAAQ,IAAI,MAAM,qBAAqB,KAAK,UAAU,GAAG,GAAG;AACjE,eAAK,aAAa,GAAG;AACrB,gBAAM,MAAM,KAAK,OAAO,GAAG;AAC3B,eAAK,IAAI,GAAG;AAAA,QAChB,OAAO;AACH,eAAK,IAAI;AAAA,QACb;AAAA,MACJ,CAAC;AACD,WAAK,GAAG,SAAS,MAAM;AACnB,aAAK,QAAQ,IAAI,KAAK,mBAAmB,sBAAsB;AAAA,MACnE,CAAC;AACD,WAAK,GAAG,SAAS,SAAO;AACpB,aAAK,QAAQ,IAAI,MAAM,cAAc,yBAAyB,IAAI,SAAS;AAAA,MAC/E,CAAC;AAAA,IACL,CAAC;AAED,SAAK,OAAO,OAAO,KAAK,QAAQ,OAAO,MAAM,KAAK,QAAQ,OAAO,MAAM,MAAM;AACzE,YAAM,OAAO,6CAA6C,KAAK,OAAO,QAAQ,EAAE,WAAW,KAAK,OAAO,QAAQ,EAAE;AACjH,WAAK,QAAQ,IAAI,KAAK,IAAI;AAAA,IAC9B,CAAC;AAAA,EACL;AAAA,EAQA,OAAc,KAAK,SAAgC;AAC/C,WAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,UAAU,GAAI,CAAC;AAAA,EACrE;AACJ;",
  "names": []
}
